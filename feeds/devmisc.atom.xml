<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pdt's Blog!</title><link href="http://blog.pdt.space/" rel="alternate"></link><link href="http://blog.pdt.space/feeds/devmisc.atom.xml" rel="self"></link><id>http://blog.pdt.space/</id><updated>2015-11-05T06:10:00+07:00</updated><entry><title>Biggest professionalÂ mistake</title><link href="http://blog.pdt.space/posts/2015/11/biggest-professional-mistake/" rel="alternate"></link><updated>2015-11-05T06:10:00+07:00</updated><author><name>pdt</name></author><id>tag:blog.pdt.space,2015-11-05:posts/2015/11/biggest-professional-mistake/</id><summary type="html">&lt;p&gt;This is about a time when I interviewed and the interviewer asked me about
my biggest professional mistake to&amp;nbsp;date.&lt;/p&gt;
&lt;p&gt;At that time it was not very clear to me what he meant by &amp;#8220;professional mistake&amp;#8221;, so I asked him
whether it was like some illegal thing or the like. Yeah, it was kind of silly, I agree but you have to understand
I was during an interview and I was quite&amp;nbsp;tense.&lt;/p&gt;
&lt;p&gt;Like everyone else, I&amp;#8217;ve made tons of mistakes. Some are more painful than others. I typically take failure
very very hard, but it helps in the long term avoiding some of these previous ones. So after thinking for a bit,
I went with the time during my last-term internship. I remember it affecting me quite a lot, but I don&amp;#8217;t think my answer
was not that good, which is a shame because I really really like the position as I invested a lot a lot of my time on&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;The thing is there are some lessons we learned the hard way that completely changed the way we work
and thus we took them a bit for granted. After getting out of the office, I was thinking deeply about this,
leading to a note, which subsequently becomes this&amp;nbsp;post.&lt;/p&gt;
&lt;h2 id="know-your-priorities"&gt;Know your priorities&lt;a class="headerlink" href="#know-your-priorities" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, the mistake that I told the interviewer was where I had serialize and send data to the front-end where they are displayed
using some js visualization libraries. Now it does not seem like too much, but I was not a front-end/js guy (far from it),
so what I did was write some python wrappers for the visualization libraries since
that what my old team taught me (even though it was java and not python but the idea still holds).
The &amp;#8220;solution&amp;#8221; was ugly, complex and nasty. But the most important part is that it&amp;#8217;s very buggy,
so it took me a lot of time debugging and ironing out the errors, missing out on all the
&lt;code&gt;priorities&lt;/code&gt;. Yes, &lt;code&gt;priority&lt;/code&gt; is the key word here. I was tasked to help display the data, to solve a particular problem,
not to write wrappers! So I ended up end up doing tons and tons of extra time yet  without much success.
It was quite painful: the inertia, reverting to one&amp;#8217;s old shell without thinking. From that time one, everytime
I spent much more time on the design part before diving right in like crazy. Some are much better than me at this,
they do it intuitively but not me, I&amp;#8217;ve learned my&amp;nbsp;lesson.&lt;/p&gt;
&lt;h2 id="copy-paste-is-evil"&gt;Copy-paste is &lt;span class="caps"&gt;EVIL&lt;/span&gt;&lt;a class="headerlink" href="#copy-paste-is-evil" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What else? Yesterday I was teaching a course and see somebody was copying/pasting code from stackoverflow
and had trouble getting the right answer. The code was correct  but there&amp;#8217;s a twist: it&amp;#8217;s not quite
the same interface / precondition so one has to adapt a bit. I&amp;#8217;m not at all against using stackoverflow/gg but
at least we have to understand the solution and the problem we&amp;#8217;re solving.
So I asked him why he&amp;#8217;s struggling and walked him through the problem and the solution and it turned out very nice.
What he did actually reminds me a lot of&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;So back when i started I used to put a focus on the whole problem solving and not much on implementation and
I did a lot of copy-pasty from the net, especially when dealing with languages/frameworks that I was not familiar with.
It helps accomplish the task much faster, at least at the beginning. Therefore, when the problem arises again,
I just went ahead and took the old piece of code or searching, adapt a bitand put it&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Then there&amp;#8217;s this one co-worker who saw me doing this all over the place so he taught me about the
&lt;code&gt;DRY principle&lt;/code&gt;. I did not quite get him until I had to deal with compilation errors when I change my mind but forget to
modify the code at all&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;Moreover, one day it just hits me that I already visited the same stackoverflow page multiple times,
which means I had not learned anything about this particular problem. Now I always always try to retype the whole thing first.
You get to much better understand the idea behind the code, as well as the details of implementation, thus avoid all the
subsequent problems. And it does not take that long, so it turns out we  actually save&amp;nbsp;time!&lt;/p&gt;
&lt;h2 id="always-write-unit-tests"&gt;Always write unit tests&lt;a class="headerlink" href="#always-write-unit-tests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But I still think the biggest mistake I committed is not writing unittest properly also during an internship. At my school,
I actually don&amp;#8217;t remember we put a focus on this aspect. So in order to move faster, I completely ignore the whole
testing thing and hoped to get away with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For me at that time, it works if the majority if for some cases it give the right behavior. Well, now
most of seasoned/experienced engineers know it&amp;#8217;s 100\% stupid and I agree with them. Because I had to take feedback from
the final client so the specs change constantly and boys the headache it gave me debugging/dealing with broken things.
It&amp;#8217;s a classical case of inexperience and I learned this lesson so hard now I&amp;#8217;m not even comfortable without unit tests.
I just don&amp;#8217;t feel safe. I just have to write some tests to sleep better at night.
There&amp;#8217;s someone like the guy in the first chapter of &amp;#8220;Coders at work&amp;#8221; who just knows that
his code works but not me, not&amp;nbsp;again.&lt;/p&gt;
&lt;h2 id="final"&gt;Final&lt;a class="headerlink" href="#final" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since many have now become a part of your workflow, incorporated with your workstyle you don&amp;#8217;t think much
about it anymore,  but if I got asked that question again, this would be my&amp;nbsp;answer. &lt;/p&gt;</summary><category term="dev"></category><category term="engineering"></category><category term="mistake"></category><category term="learning"></category></entry></feed>