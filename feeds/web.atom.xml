<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pdt's Blog!</title><link href="http://blog.pdt.space/" rel="alternate"></link><link href="http://blog.pdt.space/feeds/web.atom.xml" rel="self"></link><id>http://blog.pdt.space/</id><updated>2015-06-20T22:22:00+07:00</updated><entry><title>My setup for this veryÂ blog</title><link href="http://blog.pdt.space/posts/2015/06/my-setup-for-this-very-blog/" rel="alternate"></link><updated>2015-06-20T22:22:00+07:00</updated><author><name>pdt</name></author><id>tag:blog.pdt.space,2015-06-20:posts/2015/06/my-setup-for-this-very-blog/</id><summary type="html">&lt;p&gt;Tonight is a quiet lonely night and I&amp;#8217;m in the mood for writing something, anything really. Normally I would love to
talk a bit about politics or history, but I have this priviledge coming from a communist country
where these kinds of stuffs would get you into troubles. So I guess writing a bit on how I get this blog
up and running might not be a bit &lt;em&gt;less complicated&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="how-to-get-started"&gt;How to get started&lt;a class="headerlink" href="#how-to-get-started" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.pdt.space/posts/2015/03/my-first-post-ever/"&gt;As mentioned earlier&lt;/a&gt;, this very blog was setup using the Pelican
static blog engine. As Pelican is quite popular, especially among Python fans (albeit not as popular
as its eternal enemy jekyll), there&amp;#8217;s no lack of &lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;great&lt;/a&gt;
&lt;a href="http://terriyu.info/blog/posts/2013/07/pelican-setup/"&gt;tutorials&lt;/a&gt; out there helping you to get&amp;nbsp;started.&lt;/p&gt;
&lt;p&gt;Google it, you say? Well, obviously it might feel a bit overwhelming at first for those who do not have prior background in web dev.
But believe me once you&amp;#8217;re get your basic config up, you&amp;#8217;ll then get comfortable very quickly and everything
takes off from&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;For me, the most important thing with blogging with Pelican (or any static engine for that matters)
consists in finding a workflow that works for you. If you don&amp;#8217;t have one yet, well it&amp;#8217;s a great time
to pick one and&amp;nbsp;learn!&lt;/p&gt;
&lt;p&gt;Regardless of the workflow choice, it should enable you to at least do these following&amp;nbsp;tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preview the content of your posts and/or your site&amp;nbsp;(*)&lt;/li&gt;
&lt;li&gt;Push the changes to the server&amp;nbsp;(**)&lt;/li&gt;
&lt;li&gt;Customizing the feel and look of your blog&amp;nbsp;(***)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I personally find the &lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;post by nafiulis&lt;/a&gt;
very comprehensive. Go read it and follows his instructions if you have no clues, highly&amp;nbsp;recommended!&lt;/p&gt;
&lt;h1 id="my-own-setup"&gt;My own setup&lt;a class="headerlink" href="#my-own-setup" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="how-blogging-with-pelican-works-again"&gt;How blogging with Pelican works again?&lt;a class="headerlink" href="#how-blogging-with-pelican-works-again" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When working with Pelican, you write not in &lt;span class="caps"&gt;HTML&lt;/span&gt; directly but in some markup language like Markdown or
reStructuredText. Pelican will take care of compiling the content that you write into &lt;span class="caps"&gt;HTML&lt;/span&gt;, coupled with
the style defined in your chosen theme to render the fancy blog posts. It comes with a default one, so need
to get your hand&amp;nbsp;dirty.&lt;/p&gt;
&lt;h2 id="previewing-content"&gt;Previewing content&lt;a class="headerlink" href="#previewing-content" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you first install Peliacan, it typically gives you a choice between a makefile and a Fabric script
for automating all the repetitive tasks. Either one allows you to take a peek before the post goes out into the wild.
More technically, it launches a local web server allowing you to see your site with the newly added posts.
Sounds great, battery included!  Bad new is every time you make some changes to your liking, let it be customizing your
theme or update the post, the server will not be aware of this yet and you have to refresh the browser manually. So much&amp;nbsp;hassle.&lt;/p&gt;
&lt;!-- So there are several ways to solve this. For example one can use a text editor capable of automatically --&gt;

&lt;!-- render the post lik --&gt;

&lt;p&gt;e
Obviously there are text editor our there that can help you do this automatically like &lt;a href=""&gt;Atom&lt;/a&gt; which gives you the a of the result &lt;span class="caps"&gt;HTML&lt;/span&gt;.
The incovenience is that it may not be able to take into account the look and feel from your blog&amp;#8217;s current&amp;nbsp;theme.&lt;/p&gt;
&lt;p&gt;Like many other, my approach is to use an automate tool like &lt;a href=""&gt;Gulp&lt;/a&gt; or &lt;a href=""&gt;Grunt&lt;/a&gt; since I was already using one.
The learning curve is rather steep, but after you set them up, you&amp;#8217;ll never have to look back. The concecus now is apparently 
&lt;a href=""&gt;Gulp&lt;/a&gt;. So if you&amp;#8217;ve never heard of either of them, it may be a great time to&amp;nbsp;learn.&lt;/p&gt;
&lt;h2 id="pushing-your-posts-to-the-server"&gt;Pushing your posts to the server&lt;a class="headerlink" href="#pushing-your-posts-to-the-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fully disclose, I host this blog that no one reads without paying a dime at &lt;a href=""&gt;Github Pages&lt;/a&gt;.
If you have never heard of github (or git), again seriously man go learn
at least the basics of them Once you get the principle ideas already, now we are presented with
different strategies to deploy our&amp;nbsp;posts.&lt;/p&gt;
&lt;p&gt;We can render locally to &lt;span class="caps"&gt;HTML&lt;/span&gt; and push the changes to the distant server (by our friend at github
in my case). Or we can use the technique described &lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;
here&lt;/a&gt;.
You see, regardless of strategies, we still need to use git (or mercurial but no &lt;span class="caps"&gt;CVS&lt;/span&gt;, thanks) to
version-control our content. The later approach allows to leverage TravisCI and git-hooks to detect
every time we push the markup code to our github repo, then compile and push the rendered content
to the github page branch. Very nice and clean&amp;nbsp;method.&lt;/p&gt;
&lt;h2 id="customizing-the-looks-and-feels"&gt;Customizing the looks and feels&lt;a class="headerlink" href="#customizing-the-looks-and-feels" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This parts requires some basic knowledge of &lt;span class="caps"&gt;CSS&lt;/span&gt; and &lt;span class="caps"&gt;HTML&lt;/span&gt;, you just can expect to get around it
and be alive. Again, if you opt for the Grunt (Gulp) solution, you should be fine here
as Grunt/Gulp will capture any modifications you make to reflect on the theme and allow you
to preview before going live. I normally don&amp;#8217;t do &lt;span class="caps"&gt;CSS&lt;/span&gt; directly but use &lt;span class="caps"&gt;SASS&lt;/span&gt; instead, so an automation
tool is a must for me as no sane men compile them&amp;nbsp;manually.&lt;/p&gt;
&lt;h2 id="the-most-important-part-writing"&gt;The most important part: writing&lt;a class="headerlink" href="#the-most-important-part-writing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You gotta agree with me here, being able to update your site requires more time than setting it up.
This is the most important part in your workflow yet no tools could help you&amp;nbsp;with!&lt;/p&gt;</summary><category term="blog"></category><category term="misc"></category></entry></feed>